#
stages:
  - build
  - docker
  - deploy

variables:
  REGION: $AWS_REGION
  REPOSITORY_URI: $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/${CI_PROJECT_NAME}
  BASE_REPOSITORY_URI: $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com
# AWS_ACCOUNT - environment variable, it will come from gitlab Variables
# AWS_REGION - environment variable, it will come from gitlab Variables

before_script:
  - COMMIT_HASH="$(echo $CI_COMMIT_SHA | head -c 8)"
  - IMAGE_TAG="${CI_PIPELINE_IID}_${COMMIT_HASH}"
  - mkdir -p /root/.aws
  - echo $AWS_CREDENTIALS | base64 -d > /root/.aws/credentials
# AWS_CREDENTIALS - environment variable, it will come from gitlab Variables

build:
  stage: build
  image: maven:3.6.3-jdk-11
  script:
    - echo "Building app..."
    - mvn clean install
    - echo "Finished building the app."
  artifacts:
    expire_in: 1 week
    paths:
      - target/*.jar

docker:
  stage: docker
  only:
    - development
    - /release.*/
  script:
    - echo "${CI_PROJECT_NAME}"
    - echo $REPOSITORY_URI:$IMAGE_TAG
    - docker build -t ${REPOSITORY_URI}:latest .
    - docker tag ${REPOSITORY_URI}:latest ${REPOSITORY_URI}:${IMAGE_TAG}

    - $(aws ecr get-login --no-include-email --region=${REGION})
    - docker push ${REPOSITORY_URI}:latest

#deployToFargate:
#  stage: deploy
#  cache: []
#  only:
#    - development
#    - /release.*/
#  script:
#    - EXEC_ROLE_ARN=arn:aws:iam::789267015352:role/uatTasksExeRole
#    - TASK_ROLE_ARN=arn:aws:iam::789267015352:role/uat_${CI_PROJECT_NAME}_role_fargate
#    - CLUSTER_NAME=uatCluster
#    - TASK_DEFINITION_NAME=uat_${CI_PROJECT_NAME}_api_task_fargate
#    - SERVICE_NAME=${CI_PROJECT_NAME}_api_fargate
#    - echo $REPOSITORY_URI:$IMAGE_TAG
#    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "${TASK_DEFINITION_NAME}" --region "${REGION}")
#    - CPU_PARAM=$(echo $TASK_DEFINITION | jq '.taskDefinition.cpu | tonumber')
#    - MEMORY_PARAM=$(echo $TASK_DEFINITION | jq '.taskDefinition.memory | tonumber')
#    - NEW_CONTAINER_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${REPOSITORY_URI}:${IMAGE_TAG}" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]')
#    - echo ${TASK_DEFINITION}
#    - echo ${NEW_CONTAINER_DEFINITION}
#    - echo ${CPU_PARAM}
#    - echo ${MEMORY_PARAM}
#    - echo "Registering new container definition..."
#    - aws ecs register-task-definition --region "${REGION}" --family "${TASK_DEFINITION_NAME}" --container-definitions "${NEW_CONTAINER_DEFINITION}" --execution-role-arn "${EXEC_ROLE_ARN}" --task-role-arn "${TASK_ROLE_ARN}" --requires-compatibilities "FARGATE" --network-mode "awsvpc" --cpu ${CPU_PARAM} --memory ${MEMORY_PARAM}
#    - echo "Updating the service..."
#    - aws ecs update-service --region "${REGION}" --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}"  --task-definition "${TASK_DEFINITION_NAME}"
